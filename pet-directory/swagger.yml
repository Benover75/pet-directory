openapi: 3.0.0
info:
  title: Pet Directory API
  version: "1.0.0"
  description: REST API documentation for Pet Directory service

servers:
  - url: http://localhost:5000/api/v1

tags:
  - name: Auth
    description: User authentication endpoints
  - name: Businesses
    description: Manage pet-related businesses
  - name: Services
    description: Manage services for businesses
  - name: Reviews
    description: Business and service reviews
  - name: Pets
    description: User pet profiles

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              field: { type: string }
              message: { type: string }

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
        password:
          type: string
      required: [username, email, password]

    Business:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        address:
          type: string
        phone:
          type: string
        email:
          type: string
        website:
          type: string
      required: [name, description, address, phone, email]

    Service:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        price:
          type: number
        duration:
          type: integer
        businessId:
          type: string
          format: uuid
      required: [name, description, price, duration, businessId]

    Review:
      type: object
      properties:
        id:
          type: string
          format: uuid
        rating:
          type: integer
        comment:
          type: string
        userId:
          type: string
          format: uuid
        businessId:
          type: string
          format: uuid
        serviceId:
          type: string
          format: uuid
      required: [rating, comment, userId, businessId]

    Pet:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        type:
          type: string
          enum: [Dog, Cat, Exotic]
        breed:
          type: string
        age:
          type: integer
      required: [name, type]

    PaginatedResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
        pagination:
          type: object
          properties:
            total: { type: integer }
            page: { type: integer }
            limit: { type: integer }
            totalPages: { type: integer }

paths:
  # ---------------- Auth ----------------
  /auth/register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      summary: User login
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string }
                password: { type: string }
      responses:
        '200':
          description: JWT returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ---------------- Businesses ----------------
  /businesses:
    post:
      summary: Create a new business
      tags: [Businesses]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Business'
      responses:
        '201':
          description: Business created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Business'
    get:
      summary: List businesses with optional search/pagination
      tags: [Businesses]
      parameters:
        - in: query
          name: page
          schema: { type: integer }
        - in: query
          name: limit
          schema: { type: integer }
        - in: query
          name: search
          schema: { type: string }
      responses:
        '200':
          description: List of businesses
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - properties:
                      data:
                        items:
                          $ref: '#/components/schemas/Business'

  /businesses/{id}:
    get:
      summary: Get business by ID
      tags: [Businesses]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Business details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Business'
        '404':
          description: Business not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update a business
      tags: [Businesses]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Business'
      responses:
        '200':
          description: Business updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Business'
    delete:
      summary: Delete a business
      tags: [Businesses]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Business deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }

  # ---------------- Services ----------------
  /businesses/{businessId}/services:
    get:
      summary: Get services by business
      tags: [Services]
      parameters:
        - in: path
          name: businessId
          required: true
          schema: { type: string, format: uuid }
        - in: query
          name: page
          schema: { type: integer }
        - in: query
          name: limit
          schema: { type: integer }
      responses:
        '200':
          description: List of services
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - properties:
                      data:
                        items:
                          $ref: '#/components/schemas/Service'

  /services:
    post:
      summary: Create a service
      tags: [Services]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '201':
          description: Service created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'

  /services/{id}:
    get:
      summary: Get service by ID
      tags: [Services]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Service details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
    put:
      summary: Update a service
      tags: [Services]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '200':
          description: Service updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
    delete:
      summary: Delete a service
      tags: [Services]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Service deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }

  # ---------------- Reviews ----------------
  /reviews:
    post:
      summary: Create a review
      tags: [Reviews]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        '201':
          description: Review created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'

  /reviews/{id}:
    get:
      summary: Get review by ID
      tags: [Reviews]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Review details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
    put:
      summary: Update review
      tags: [Reviews]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        '200':
          description: Review updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
    delete:
      summary: Delete review
      tags: [Reviews]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Review deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }

  /businesses/{businessId}/reviews:
    get:
      summary: List reviews for a business
      tags: [Reviews]
      parameters:
        - in: path
          name: businessId
          required: true
          schema: { type: string, format: uuid }
        - in: query
          name: page
          schema: { type: integer }
        - in: query
          name: limit
          schema: { type: integer }
      responses:
        '200':
          description: List of reviews
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - properties:
                      data:
                        items:
                          $ref: '#/components/schemas/Review'

  # ---------------- Pets ----------------
  /pets:
    get:
      summary: Get user pets
      tags: [Pets]
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: List of pets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
    post:
      summary: Add a new pet
      tags: [Pets]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '201':
          description: Pet added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'

  /pets/{id}:
    get:
      summary: Get pet by ID
      tags: [Pets]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Pet details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
    put:
      summary: Update a pet
      tags: [Pets]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '200':
          description: Pet updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
    delete:
      summary: Delete a pet
      tags: [Pets]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Pet deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean }
