Metadata-Version: 2.4
Name: weather-mlops-pipeline
Version: 2.0.0
Summary: A comprehensive MLOps pipeline for weather data collection, preprocessing, and machine learning model training
Author-email: Weather MLOps Team <team@weather-mlops.com>
License: MIT
Project-URL: Homepage, https://github.com/weather-mlops/pipeline
Project-URL: Documentation, https://weather-mlops.readthedocs.io
Project-URL: Repository, https://github.com/weather-mlops/pipeline.git
Project-URL: Bug Tracker, https://github.com/weather-mlops/pipeline/issues
Keywords: mlops,weather,machine-learning,data-pipeline,kubeflow
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: pandas>=2.0.0
Requires-Dist: numpy>=1.24.0
Requires-Dist: scikit-learn>=1.3.0
Requires-Dist: matplotlib>=3.7.0
Requires-Dist: seaborn>=0.12.0
Requires-Dist: plotly>=5.15.0
Requires-Dist: fastapi>=0.100.0
Requires-Dist: uvicorn[standard]>=0.23.0
Requires-Dist: requests>=2.31.0
Requires-Dist: pyyaml>=6.0
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: click>=8.1.0
Requires-Dist: joblib>=1.3.0
Requires-Dist: mlflow>=2.5.0
Requires-Dist: wandb>=0.15.0
Requires-Dist: kfp>=2.13.0
Requires-Dist: kubernetes>=28.0.0
Requires-Dist: optuna>=3.2.0
Requires-Dist: shap>=0.42.0
Requires-Dist: xgboost>=1.7.0
Requires-Dist: lightgbm>=4.0.0
Provides-Extra: dev
Requires-Dist: pytest>=7.4.0; extra == "dev"
Requires-Dist: pytest-cov>=4.1.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: flake8>=6.0.0; extra == "dev"
Requires-Dist: mypy>=1.5.0; extra == "dev"
Requires-Dist: jupyter>=1.0.0; extra == "dev"
Requires-Dist: ipykernel>=6.25.0; extra == "dev"
Provides-Extra: security
Requires-Dist: bandit>=1.7.0; extra == "security"
Requires-Dist: safety>=2.3.0; extra == "security"
Provides-Extra: kubeflow
Requires-Dist: kfp>=2.13.0; extra == "kubeflow"
Requires-Dist: kubernetes>=28.0.0; extra == "kubeflow"

# 🌍 Weather MLOps Pipeline - Global Multi-City Edition

A comprehensive weather data collection, analysis, and prediction pipeline for **multiple cities worldwide** (20 countries × 2 cities each).

## 🚀 Features

### 📊 **Global Weather Data Collection**
- Collects weather for 40 cities across 20 countries
- Supports city, country, latitude, longitude, and (optionally) zipcode
- Stores and analyzes data for each city/country

### 🤖 **Advanced Machine Learning**
- Global model (city/country as features) or per-city models
- Real-time model training and evaluation
- Multi-feature prediction (temperature, humidity, wind, pressure, visibility)

### 🌐 **API Endpoints**
- `/predict` - Temperature prediction (now with `city` and `country` parameters)
- `/weather_summary` - Real-time weather data for any city
- `/docs` - Interactive API documentation

### 📈 **Data Analytics**
- Weather dashboard for any city
- Historical data analysis and visualization

## 🛠️ Installation & Setup

> **Security Note:**
> - Never commit real API keys or secrets to the repository.
> - Set your OpenWeather API key in `config/config.yaml` (see example config for multi-city setup).

### Prerequisites
- Python 3.8+
- OpenWeather API key (free at [openweathermap.org](https://openweathermap.org/api))

### Quick Start
```bash
# Clone the repository
git clone <repository-url>
cd weather-mlops-pipeline

# Install dependencies
pip install -r requirements.txt

# Copy and edit the example config for your API key and cities
cp config/config.example.yaml config/config.yaml
# Edit config/config.yaml and add your API key

# Run the complete pipeline for all cities
python run_pipeline.py
```

## 🌍 Supported Example Cities

| Country         | City 1         | City 2         |
|-----------------|----------------|----------------|
| United States   | New York       | Los Angeles    |
| United Kingdom  | London         | Manchester     |
| Canada          | Toronto        | Vancouver      |
| Australia       | Sydney         | Melbourne      |
| Germany         | Berlin         | Munich         |
| France          | Paris          | Lyon           |
| Japan           | Tokyo          | Osaka          |
| India           | Mumbai         | Delhi          |
| Brazil          | São Paulo      | Rio de Janeiro |
| South Africa    | Johannesburg   | Cape Town      |
| Italy           | Rome           | Milan          |
| Russia          | Moscow         | Saint Petersburg |
| China           | Beijing        | Shanghai       |
| Mexico          | Mexico City    | Guadalajara    |
| Turkey          | Istanbul       | Ankara         |
| South Korea     | Seoul          | Busan          |
| Spain           | Madrid         | Barcelona      |
| Egypt           | Cairo          | Alexandria     |
| Indonesia       | Jakarta        | Surabaya       |

## 🎯 Usage

### **Run the Complete Pipeline (All Cities)**
```bash
python run_pipeline.py
```

### **API Usage (Specify City & Country)**
```bash
# Get weather prediction for London, UK
curl "http://localhost:8000/predict?city=London&country=GB&hour=14&humidity=65&wind_speed=3.2&pressure=1013&visibility=10"

# Get current weather summary for Tokyo, JP
curl "http://localhost:8000/weather_summary?city=Tokyo&country=JP"
```

### **Weather Dashboard (Any City)**
```bash
python weather_dashboard.py --city London --country GB
```

## 🔧 Configuration

Edit `config/config.yaml` to customize:
- API key and settings
- List of countries and cities (see example config)
- Data collection parameters
- Model configuration

## 📊 API Endpoints

### GET `/predict`
Predict temperature for any city/country.

**Parameters:**
- `city` (str): City name (e.g., London)
- `country` (str): Country code (e.g., GB)
- `hour` (int): Hour of day (0-23)
- `humidity` (float): Humidity percentage
- `wind_speed` (float): Wind speed in m/s
- `pressure` (float, optional): Pressure in hPa
- `visibility` (float, optional): Visibility in km

**Response:**
```json
{
  "predicted_temperature_celsius": 22.5,
  "predicted_temperature_fahrenheit": 72.5,
  "features_used": 5,
  "location": "London, GB"
}
```

### GET `/weather_summary`
Get comprehensive current weather data for any city/country.

**Parameters:**
- `city` (str): City name
- `country` (str): Country code

**Response:**
```json
{
  "location": "Tokyo, JP",
  "timestamp": "2025-07-11T23:54:40.283241",
  "temperature": {
    "celsius": 22.36,
    "fahrenheit": 72.25
  },
  ...
}
```

## 🧪 Testing

```bash
# Run all tests
python -m pytest test/
```

## 🚀 Deployment

### Docker Deployment
```bash
# Build and run with Docker
docker build -t weather-mlops .
docker run -p 8000:8000 weather-mlops
```

### Production Deployment
```bash
# Start production server
uvicorn src.deploy.app:app --host 0.0.0.0 --port 8000 --workers 4
```

## 📈 Monitoring & Analytics

- **Weather Dashboard**: `python weather_dashboard.py --city <City> --country <Country>`
- **API Documentation**: http://localhost:8000/docs
- **Health Check**: http://localhost:8000/health

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests
5. Submit a pull request

## 📄 License

This project is licensed under the MIT License.

## 🆘 Support

For issues and questions:
- Check the API documentation at http://localhost:8000/docs
- Review the weather dashboard: `python weather_dashboard.py --city <City> --country <Country>`
- Check the logs in the console output

---

**🌍 Happy Global Weather Forecasting!** 🌍
